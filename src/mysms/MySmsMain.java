/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MySmsMain.java
 *
 * Created on 26-Aug-2009, 16:51:31
 */

package mysms;

import com.jgoodies.validation.util.ValidationUtils;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.mail.AuthenticationFailedException;
import javax.swing.UnsupportedLookAndFeelException;
import mysms.util.GoogleMail;
import javax.mail.MessagingException;
import javax.mail.internet.AddressException;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.UIManager;
import mysms.DAO.OptionsDAO;
import mysms.beans.ContactBean;
import mysms.beans.OptionsBean;
import mysms.substance.SubstanceATunesBlueLookAndFeel;
import mysms.util.StringEncrypter;
import mysms.util.StringUtil;
import mysms.util.ToolTip;
import mysms.util.outlook.gui.ContactExplorer;
import org.jdesktop.application.Action;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.TaskMonitor;
import org.jvnet.substance.skin.SubstanceAutumnLookAndFeel;
import org.jvnet.substance.skin.SubstanceBusinessBlueSteelLookAndFeel;
import org.jvnet.substance.skin.SubstanceMagmaLookAndFeel;
import org.jvnet.substance.skin.SubstanceMistSilverLookAndFeel;
import org.jvnet.substance.skin.SubstanceOfficeBlue2007LookAndFeel;
import org.jvnet.substance.skin.SubstanceOfficeSilver2007LookAndFeel;

import org.apache.commons.httpclient.*;
import org.apache.commons.httpclient.methods.*;

/**
 *
 * @author HarshIT
 */
public class MySmsMain extends javax.swing.JFrame {

    private OptionsBean oBean;
    private OptionsDAO oDAO;

    private boolean ToLoad;
    private boolean failed;

    /** Creates new form MySmsMain */
    public MySmsMain() {
        initComponents();
        java.awt.EventQueue.invokeLater(new Runnable()
            {
                @Override
                public void run() {
                        checkLoadOptions();
                }
            });
    }
    public static void main(String args[]) {
//        String systemLaf = UIManager.getSystemLookAndFeelClassName();
        try {
            UIManager.setLookAndFeel("org.jvnet.substance.skin.SubstanceOfficeBlue2007LookAndFeel");
//            UIManager.setLookAndFeel("org.fife.plaf.Office2003.Office2003LookAndFeel");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MySmsMain.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(MySmsMain.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(MySmsMain.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(MySmsMain.class.getName()).log(Level.SEVERE, null, ex);
        }

//        JFrame.setDefaultLookAndFeelDecorated(true);
            java.awt.EventQueue.invokeLater(new Runnable()
            {
                @Override
                public void run() {
                    MySmsMain m = new MySmsMain();
                    centerOnScreen(m);
                    m.pack();
                    m.setVisible(true);
//                    System.out.println("Inside main of MySms");
//                m.setLocationRelativeTo(null);
                    }
            });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        OptionsFrame = new javax.swing.JFrame();
        lb160by2LoginName = new javax.swing.JLabel();
        lbl160by2Email = new javax.swing.JLabel();
        lblEmailUserName = new javax.swing.JLabel();
        lblEmailPassword = new javax.swing.JLabel();
        lblUserInfo = new javax.swing.JLabel();
        lblServerInfo = new javax.swing.JLabel();
        lblSMTPServer = new javax.swing.JLabel();
        lblSMTPPort = new javax.swing.JLabel();
        lblSSL = new javax.swing.JLabel();
        lblLogonInfo = new javax.swing.JLabel();
        txt160by2LoginName = new javax.swing.JTextField();
        txt160by2Email = new javax.swing.JTextField();
        txtSMTPServer = new javax.swing.JTextField();
        txtSMTPPort = new javax.swing.JTextField();
        chbSSL = new javax.swing.JCheckBox();
        txtEmailUserName = new javax.swing.JTextField();
        txtEmailPassword = new javax.swing.JPasswordField();
        butSave = new javax.swing.JButton();
        butCloseOptions = new javax.swing.JButton();
        TabbedPane = new javax.swing.JTabbedPane();
        mainPanel = new javax.swing.JPanel();
        lblTo = new javax.swing.JLabel();
        lblMessage = new javax.swing.JLabel();
        txtTo = new javax.swing.JTextField();
        MessageScrollPane = new javax.swing.JScrollPane();
        txtAMessage = new javax.swing.JTextArea();
        btSend = new javax.swing.JButton();
        btClear = new javax.swing.JButton();
        btAddNum = new javax.swing.JButton();
        btSchedule = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        scheduledPanel = new javax.swing.JPanel();
        mainMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        exitItem = new javax.swing.JMenuItem();
        optionsMenu = new javax.swing.JMenu();
        configurationItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutItem = new javax.swing.JMenuItem();

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(mysms.MySmsApp.class).getContext().getResourceMap(MySmsMain.class);
        OptionsFrame.setTitle(resourceMap.getString("OptionsFrame.title")); // NOI18N
        OptionsFrame.setName("OptionsFrame"); // NOI18N

        lb160by2LoginName.setText(resourceMap.getString("lb160by2LoginName.text")); // NOI18N
        lb160by2LoginName.setName("lb160by2LoginName"); // NOI18N

        lbl160by2Email.setText(resourceMap.getString("lbl160by2Email.text")); // NOI18N
        lbl160by2Email.setName("lbl160by2Email"); // NOI18N

        lblEmailUserName.setText(resourceMap.getString("lblEmailUserName.text")); // NOI18N
        lblEmailUserName.setName("lblEmailUserName"); // NOI18N

        lblEmailPassword.setText(resourceMap.getString("lblEmailPassword.text")); // NOI18N
        lblEmailPassword.setName("lblEmailPassword"); // NOI18N

        lblUserInfo.setFont(resourceMap.getFont("lblUserInfo.font")); // NOI18N
        lblUserInfo.setText(resourceMap.getString("lblUserInfo.text")); // NOI18N
        lblUserInfo.setName("lblUserInfo"); // NOI18N

        lblServerInfo.setFont(resourceMap.getFont("lblServerInfo.font")); // NOI18N
        lblServerInfo.setText(resourceMap.getString("lblServerInfo.text")); // NOI18N
        lblServerInfo.setName("lblServerInfo"); // NOI18N

        lblSMTPServer.setText(resourceMap.getString("lblSMTPServer.text")); // NOI18N
        lblSMTPServer.setName("lblSMTPServer"); // NOI18N

        lblSMTPPort.setText(resourceMap.getString("lblSMTPPort.text")); // NOI18N
        lblSMTPPort.setName("lblSMTPPort"); // NOI18N

        lblSSL.setText(resourceMap.getString("lblSSL.text")); // NOI18N
        lblSSL.setName("lblSSL"); // NOI18N

        lblLogonInfo.setFont(resourceMap.getFont("lblLogonInfo.font")); // NOI18N
        lblLogonInfo.setText(resourceMap.getString("lblLogonInfo.text")); // NOI18N
        lblLogonInfo.setName("lblLogonInfo"); // NOI18N

        txt160by2LoginName.setText(resourceMap.getString("txt160by2LoginName.text")); // NOI18N
        txt160by2LoginName.setName("txt160by2LoginName"); // NOI18N

        txt160by2Email.setText(resourceMap.getString("txt160by2Email.text")); // NOI18N
        txt160by2Email.setName("txt160by2Email"); // NOI18N

        txtSMTPServer.setText(resourceMap.getString("txtSMTPServer.text")); // NOI18N
        txtSMTPServer.setName("txtSMTPServer"); // NOI18N

        txtSMTPPort.setText(resourceMap.getString("txtSMTPPort.text")); // NOI18N
        txtSMTPPort.setName("txtSMTPPort"); // NOI18N

        chbSSL.setText(resourceMap.getString("chbSSL.text")); // NOI18N
        chbSSL.setName("chbSSL"); // NOI18N

        txtEmailUserName.setText(resourceMap.getString("txtEmailUserName.text")); // NOI18N
        txtEmailUserName.setName("txtEmailUserName"); // NOI18N

        txtEmailPassword.setText(resourceMap.getString("txtEmailPassword.text")); // NOI18N
        txtEmailPassword.setName("txtEmailPassword"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(mysms.MySmsApp.class).getContext().getActionMap(MySmsMain.class, this);
        butSave.setAction(actionMap.get("saveOptions")); // NOI18N
        butSave.setText(resourceMap.getString("butSave.text")); // NOI18N
        butSave.setName("butSave"); // NOI18N

        butCloseOptions.setAction(actionMap.get("closeOptions")); // NOI18N
        butCloseOptions.setText(resourceMap.getString("butCloseOptions.text")); // NOI18N
        butCloseOptions.setName("butCloseOptions"); // NOI18N

        javax.swing.GroupLayout OptionsFrameLayout = new javax.swing.GroupLayout(OptionsFrame.getContentPane());
        OptionsFrame.getContentPane().setLayout(OptionsFrameLayout);
        OptionsFrameLayout.setHorizontalGroup(
            OptionsFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, OptionsFrameLayout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(OptionsFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblUserInfo, javax.swing.GroupLayout.DEFAULT_SIZE, 394, Short.MAX_VALUE)
                    .addGroup(OptionsFrameLayout.createSequentialGroup()
                        .addGroup(OptionsFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(OptionsFrameLayout.createSequentialGroup()
                                .addComponent(lblServerInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(233, 233, 233))
                            .addGroup(OptionsFrameLayout.createSequentialGroup()
                                .addComponent(lblLogonInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(237, 237, 237))
                            .addGroup(OptionsFrameLayout.createSequentialGroup()
                                .addGroup(OptionsFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(OptionsFrameLayout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addGroup(OptionsFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(OptionsFrameLayout.createSequentialGroup()
                                                .addComponent(lb160by2LoginName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGap(62, 62, 62))
                                            .addGroup(OptionsFrameLayout.createSequentialGroup()
                                                .addComponent(lbl160by2Email, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGap(51, 51, 51))
                                            .addGroup(OptionsFrameLayout.createSequentialGroup()
                                                .addComponent(lblSMTPServer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGap(42, 42, 42))
                                            .addComponent(lblSMTPPort, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addGroup(OptionsFrameLayout.createSequentialGroup()
                                                .addComponent(lblSSL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGap(162, 162, 162))
                                            .addGroup(OptionsFrameLayout.createSequentialGroup()
                                                .addComponent(lblEmailPassword, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGap(110, 110, 110))
                                            .addGroup(OptionsFrameLayout.createSequentialGroup()
                                                .addComponent(lblEmailUserName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGap(100, 100, 100)))
                                        .addGap(18, 18, 18))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, OptionsFrameLayout.createSequentialGroup()
                                        .addComponent(butSave)
                                        .addGap(63, 63, 63)))
                                .addGroup(OptionsFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtEmailPassword, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                                    .addGroup(OptionsFrameLayout.createSequentialGroup()
                                        .addComponent(chbSSL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(88, 88, 88))
                                    .addGroup(OptionsFrameLayout.createSequentialGroup()
                                        .addComponent(txtSMTPPort, javax.swing.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE)
                                        .addGap(72, 72, 72))
                                    .addComponent(txtSMTPServer, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                                    .addComponent(txt160by2Email, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                                    .addComponent(txt160by2LoginName, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                                    .addComponent(butCloseOptions)
                                    .addComponent(txtEmailUserName, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE))))
                        .addGap(52, 52, 52)))
                .addContainerGap())
        );
        OptionsFrameLayout.setVerticalGroup(
            OptionsFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, OptionsFrameLayout.createSequentialGroup()
                .addContainerGap(28, Short.MAX_VALUE)
                .addComponent(lblUserInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(OptionsFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(OptionsFrameLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(lb160by2LoginName))
                    .addComponent(txt160by2LoginName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(OptionsFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(OptionsFrameLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(lbl160by2Email))
                    .addComponent(txt160by2Email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addComponent(lblServerInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(OptionsFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(OptionsFrameLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(lblSMTPServer, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtSMTPServer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(OptionsFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(OptionsFrameLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(lblSMTPPort))
                    .addComponent(txtSMTPPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(OptionsFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(OptionsFrameLayout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(lblSSL))
                    .addComponent(chbSSL))
                .addGap(18, 18, 18)
                .addComponent(lblLogonInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(OptionsFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(OptionsFrameLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(lblEmailUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtEmailUserName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(OptionsFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(OptionsFrameLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(lblEmailPassword))
                    .addComponent(txtEmailPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(OptionsFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(butCloseOptions)
                    .addComponent(butSave))
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N

        TabbedPane.setName("TabbedPane"); // NOI18N

        mainPanel.setName("mainPanel"); // NOI18N

        lblTo.setText(resourceMap.getString("lblTo.text")); // NOI18N
        lblTo.setName("lblTo"); // NOI18N

        lblMessage.setText(resourceMap.getString("lblMessage.text")); // NOI18N
        lblMessage.setName("lblMessage"); // NOI18N

        txtTo.setName("txtTo"); // NOI18N

        MessageScrollPane.setName("MessageScrollPane"); // NOI18N

        txtAMessage.setColumns(20);
        txtAMessage.setRows(5);
        txtAMessage.setName("txtAMessage"); // NOI18N
        txtAMessage.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtAMessageKeyReleased(evt);
            }
        });
        MessageScrollPane.setViewportView(txtAMessage);

        btSend.setAction(actionMap.get("sendSms")); // NOI18N
        btSend.setText(resourceMap.getString("btSend.text")); // NOI18N
        btSend.setName("btSend"); // NOI18N

        btClear.setAction(actionMap.get("clear")); // NOI18N
        btClear.setText(resourceMap.getString("btClear.text")); // NOI18N
        btClear.setName("btClear"); // NOI18N

        btAddNum.setAction(actionMap.get("addNumber")); // NOI18N
        btAddNum.setText(resourceMap.getString("btAddNum.text")); // NOI18N
        btAddNum.setName("btAddNum"); // NOI18N

        btSchedule.setAction(actionMap.get("scheduleSMS")); // NOI18N
        btSchedule.setText(resourceMap.getString("btSchedule.text")); // NOI18N
        btSchedule.setName("btSchedule"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        statusMessageLabel.setText(resourceMap.getString("statusMessageLabel.text")); // NOI18N
        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusAnimationLabel.setText(resourceMap.getString("statusAnimationLabel.text")); // NOI18N
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblMessage)
                    .addComponent(lblTo))
                .addGap(36, 36, 36)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addComponent(statusMessageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(statusAnimationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(btSend)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btSchedule)
                        .addGap(5, 5, 5)
                        .addComponent(btClear))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(txtTo, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btAddNum))
                    .addComponent(MessageScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTo)
                    .addComponent(txtTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btAddNum))
                .addGap(18, 18, 18)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblMessage)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addComponent(MessageScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btSend)
                            .addComponent(btClear)
                            .addComponent(btSchedule))))
                .addGap(30, 30, 30)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(statusAnimationLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 19, Short.MAX_VALUE)
                    .addComponent(progressBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 19, Short.MAX_VALUE)
                    .addComponent(statusMessageLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );

        TabbedPane.addTab(resourceMap.getString("mainPanel.TabConstraints.tabTitle"), mainPanel); // NOI18N

        scheduledPanel.setName("scheduledPanel"); // NOI18N

        javax.swing.GroupLayout scheduledPanelLayout = new javax.swing.GroupLayout(scheduledPanel);
        scheduledPanel.setLayout(scheduledPanelLayout);
        scheduledPanelLayout.setHorizontalGroup(
            scheduledPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 438, Short.MAX_VALUE)
        );
        scheduledPanelLayout.setVerticalGroup(
            scheduledPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 271, Short.MAX_VALUE)
        );

        TabbedPane.addTab(resourceMap.getString("scheduledPanel.TabConstraints.tabTitle"), scheduledPanel); // NOI18N

        mainMenuBar.setName("mainMenuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        exitItem.setAction(actionMap.get("quit")); // NOI18N
        exitItem.setText(resourceMap.getString("exitItem.text")); // NOI18N
        exitItem.setName("exitItem"); // NOI18N
        fileMenu.add(exitItem);

        mainMenuBar.add(fileMenu);

        optionsMenu.setText(resourceMap.getString("optionsMenu.text")); // NOI18N
        optionsMenu.setName("optionsMenu"); // NOI18N

        configurationItem.setAction(actionMap.get("showOptionsFrame")); // NOI18N
        configurationItem.setText(resourceMap.getString("configurationItem.text")); // NOI18N
        configurationItem.setName("configurationItem"); // NOI18N
        optionsMenu.add(configurationItem);

        mainMenuBar.add(optionsMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutItem.setIcon(resourceMap.getIcon("aboutItem.icon")); // NOI18N
        aboutItem.setText(resourceMap.getString("aboutItem.text")); // NOI18N
        aboutItem.setName("aboutItem"); // NOI18N
        helpMenu.add(aboutItem);

        mainMenuBar.add(helpMenu);

        setJMenuBar(mainMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 443, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(TabbedPane)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtAMessageKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAMessageKeyReleased
                ToolTip.closeErrorMessage();
        if(txtAMessage.getText().length() > 80)
            ToolTip.showErrorMessage(txtAMessage, "Text Limit(80 chars) has reached");

    }//GEN-LAST:event_txtAMessageKeyReleased

    /**
    * @param args the command line arguments
    */

    private void checkLoadOptions() {
        oDAO = new OptionsDAO();
        ToLoad = oDAO.ifLoadOptions();

        if(ToLoad == false)
        {
//        OptionsFrame.setLocationRelativeTo(this);
        OptionsFrame.pack();
        OptionsFrame.setVisible(true);
        centerOnScreen(OptionsFrame);
//        OptionsFrame.toFront();
        }
    }

    public static void centerOnScreen(Window window)
    {
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension windowSize = window.getSize();
        windowSize.height = Math.min(windowSize.height + 20, screenSize.height);
        windowSize.width = Math.min(windowSize.width, screenSize.width);
        window.setLocation((screenSize.width - windowSize.width) / 2,
                (screenSize.height - windowSize.height) / 2);
    }

    @Action
    public void addNumber() {
//        ContactExplorer contactFrame = new ContactExplorer();

        java.awt.EventQueue.invokeLater(new Runnable()
            {
            public void run() {
                ContactExplorer.open();
            }
        });
        
    }

    @Action
    public void sendSms() throws MessagingException {

        oBean = new OptionsBean();
        oDAO = new OptionsDAO();
/*
        progressBar.setMinimum(0);
        progressBar.setMaximum(100);
        progressBar.setValue(25);
*/
        String LoginName160by2 = "";
        String Email160by2 = "";
        String SMTPServer = "";
        String SMTPPort = "";
        boolean isSSL;
        String EmailUserName = "";
        String EmailPassword = "";

        ToLoad = oDAO.ifLoadOptions();

        if(ToLoad == false)
        {
            OptionsFrame.setVisible(true);
        }
        else
        {

/*
        //      localHttpConnection = (HttpConnection)Connector.open("http://www.160by2.com/j2me/LoginCheck.asp?UserName=" + FreeSMS_160by2.vid + "&Password=" + FreeSMS_160by2.pwd);
        String request = "http://www.160by2.com/j2me/LoginCheck.asp?UserName=harshit_ps&Password=hps777888";

        HttpClient client = new HttpClient();
        GetMethod method = new GetMethod(request);

        // Send GET request
        int statusCode = 0;
            try {
                statusCode = client.executeMethod(method);
            }
            catch (IOException ex) {
                Logger.getLogger(MySmsMain.class.getName()).log(Level.SEVERE, null, ex);
            }

        if (statusCode != HttpStatus.SC_OK) {
        	System.err.println("Method failed: " + method.getStatusLine());
        }

        InputStream rstream = null;
            try {
                // Get the response body
                rstream = method.getResponseBodyAsStream();
            } catch (IOException ex) {
                Logger.getLogger(MySmsMain.class.getName()).log(Level.SEVERE, null, ex);
            }

        // Process the response from Yahoo! Web Services
        BufferedReader br = new BufferedReader(new InputStreamReader(rstream));
        String line = null;
        String line2= null;
            try {
                while ((line2 = br.readLine()) != null) {
                    line =line2;
                    System.out.println(line);
                }
            } catch (IOException ex) {
                Logger.getLogger(MySmsMain.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                br.close();
            } catch (IOException ex) {
                Logger.getLogger(MySmsMain.class.getName()).log(Level.SEVERE, null, ex);
            }

        if (true)
        {

            for(int i=0;i<128;i++)
                line2 = line2 + i%10;
            line2 = "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890";
            System.out.print(line);
            request = "http://www.160by2.com/j2me/SaveCompose.asp?Mno=9974599834" + "&Msg=" + line2 + "&i=" + line;
            System.out.print(request);
            client = new HttpClient();
            method = new GetMethod(request);

        // Send GET request
            statusCode = 0;
            try {
                statusCode = client.executeMethod(method);
            }
            catch (IOException ex) {
                Logger.getLogger(MySmsMain.class.getName()).log(Level.SEVERE, null, ex);
            }

        if (statusCode != HttpStatus.SC_OK) {
        	System.err.println("Method failed: " + method.getStatusLine());
        }

            rstream = null;
            try {
                // Get the response body
                rstream = method.getResponseBodyAsStream();
            } catch (IOException ex) {
                Logger.getLogger(MySmsMain.class.getName()).log(Level.SEVERE, null, ex);
            }

        // Process the response from Yahoo! Web Services
            br = new BufferedReader(new InputStreamReader(rstream));
            line = null;
            try {
                while ((line2 = br.readLine()) != null) {
                    line = line2;
                    System.out.println(line);
                }
            } catch (IOException ex) {
                Logger.getLogger(MySmsMain.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                br.close();
            } catch (IOException ex) {
                Logger.getLogger(MySmsMain.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
            if(true)
                return;

*/
            oBean = oDAO.loadOptions();

            LoginName160by2 = oBean.getLoginName160by2();
            Email160by2 = oBean.getEmail160by2();
            SMTPServer = oBean.getSMTPServer();
            SMTPPort = oBean.getSMTPPort();
            isSSL = oBean.isSSL();
            EmailUserName = oBean.getEmailUserName();

            StringEncrypter stre = new StringEncrypter();
            EmailPassword = stre.decrypt(oBean.getEmailPassword());

/*        System.out.print(LoginName160by2);
        System.out.print(Email160by2);
        System.out.print(SMTPServer);
        System.out.print(SMTPPort);
        System.out.print(isSSL);
        System.out.print(EmailUserName);
        System.out.print(EmailPassword);
*/
        String title = "My SMS";
        String toNumber = txtTo.getText();
        String NumberArray[] = toNumber.split(";");
        String message = txtAMessage.getText();
        int i=0;

        //    System.out.print("To : "+toNumber+"\nMessage: "+message);

        try {
            for(i=0; i<NumberArray.length;i++)
            {
                progressBar.setMinimum(0);
                progressBar.setMaximum(NumberArray.length*100);
                progressBar.setValue((i+1)*100/NumberArray.length);
                statusMessageLabel.setText("Sending SMS To: "+ NumberArray[i]);
                System.out.print("Sending SMS To: "+ NumberArray[i] +  "\n");

            GoogleMail.Send(EmailUserName, EmailPassword, NumberArray[i] +
                    "." + LoginName160by2 + "@160by2.com", title, message,
                    Email160by2, SMTPServer, SMTPPort, isSSL);
            }
        }
        catch(AuthenticationFailedException e)  {
            JOptionPane.showMessageDialog(new JFrame(), "Incorrect Username or Password");
            failed = true;
        }
        catch (AddressException e) {
            JOptionPane.showMessageDialog(new JFrame(), "Couldn't Send SMS to : "+NumberArray[i]);
            failed = true;
        }
        catch (MessagingException e) {
            JOptionPane.showMessageDialog(new JFrame(), "Couldn't Send SMS to : "+NumberArray[i]);
            failed = true;
        }
        catch(Exception e)  {
            JOptionPane.showMessageDialog(new JFrame(), "Couldn't Send SMS to : "+NumberArray[i]);
            failed = true;
        }
        finally
        {
             if(failed)
             {
                JOptionPane.showMessageDialog(new JFrame(), "Please Review the Configurations (Press F3)");
                failed = false;
                return;
             }
             else
                JOptionPane.showMessageDialog(new JFrame(), "SMS sent successfully");
        }

//        System.out.println("SMS sent successfully!");
        txtTo.setText("");
        txtAMessage.setText("");
        statusMessageLabel.setText("");

        }
    }
  public boolean isNumeric(String paramString)
  {
    StringBuffer localStringBuffer = new StringBuffer();
    int i = paramString.length();
    int j = 0;
    for (int k = 0; k < i; ++k)
    {
      char c = paramString.charAt(k);
      if (('0' <= c) && (c <= '9'))
      {
        localStringBuffer.append((char)c);
        ++j;
      }
    }
    return (j == i);
  }

    @Action
    public void scheduleSMS() {


    }

    @Action
    public void clear() {
        ToolTip.closeErrorMessage();
        txtTo.setText("");
        txtAMessage.setText("");
    }
 
    public static void fromcontactFrame(String number){

        if(number.length() >= 10)
        {
        number = number.substring(number.length()-10,number.length());
            if(txtTo.getText().isEmpty())
            {
                txtTo.setText(number);
            }
            else
                txtTo.setText(txtTo.getText() + ";" + number);
        }
        
    }

    @Action
    public void showOptionsFrame() {
        oBean = new OptionsBean();
        oDAO = new OptionsDAO();

        ToLoad = oDAO.ifLoadOptions();

        if(ToLoad == true)
        {
        oBean = oDAO.loadOptions();

        txt160by2LoginName.setText(oBean.getLoginName160by2());
        txt160by2Email.setText(oBean.getEmail160by2());
        txtSMTPServer.setText(oBean.getSMTPServer());
        txtSMTPPort.setText(oBean.getSMTPPort());
        chbSSL.setSelected(oBean.isSSL());
        txtEmailUserName.setText(oBean.getEmailUserName());

        StringEncrypter stre = new StringEncrypter();
        txtEmailPassword.setText(stre.decrypt(oBean.getEmailPassword()));
        }

        OptionsFrame.setVisible(true);
        OptionsFrame.setSize(460, 420);
//        centerOnScreen(OptionsFrame);
        OptionsFrame.setLocationRelativeTo(this);
    }

    @Action
    public void saveOptions() {

        if (ValidationUtils.isEmpty(txt160by2LoginName.getText()))
        {
        ToolTip.showErrorMessage(txt160by2LoginName, "Enter Your 160by2 Login Name!");
        return;
        }
        if (ValidationUtils.isEmpty(txt160by2Email.getText()))
        {
        ToolTip.showErrorMessage(txt160by2Email, "Enter Your 160by2 Email Address!");
        return;
        }
        if (ValidationUtils.isEmpty(txtSMTPServer.getText()))
        {
        ToolTip.showErrorMessage(txtSMTPServer, "Enter SMTP Server Address!");
        return;
        }
        if (ValidationUtils.isEmpty(txtSMTPPort.getText()))
        {
        ToolTip.showErrorMessage(txtSMTPPort, "Enter SMTP Server Port Number!");
        return;
        }
        if (ValidationUtils.isEmpty(txtEmailUserName.getText()))
        {
        ToolTip.showErrorMessage(txtEmailUserName, "Enter Your Email Address Login Name!");
        return;
        }
        if (ValidationUtils.isEmpty(txtEmailPassword.getText().toString()))
        {
        ToolTip.showErrorMessage(txtEmailPassword, "Enter Your Email Password!");
        return;
        }

        oBean = new OptionsBean();
        oDAO = new OptionsDAO();

        oBean.setLoginName160by2(txt160by2LoginName.getText().toString());
        oBean.setEmail160by2(txt160by2Email.getText().toString());
        oBean.setSMTPServer(txtSMTPServer.getText().toString());
        oBean.setSMTPPort(txtSMTPPort.getText().toString());
        oBean.setSSL(chbSSL.isSelected());
        oBean.setEmailUserName(txtEmailUserName.getText().toString());

        StringEncrypter stre = new StringEncrypter();
        oBean.setEmailPassword(stre.encrypt(txtEmailPassword.getText().toString()));

        oDAO.saveOptions(oBean);
        OptionsFrame.dispose();
    }

    @Action
    public void closeOptions() {
        OptionsFrame.dispose();
    }

    @Action
    public void showAboutBox()
    {
        if (aboutBox == null)
        {
            JFrame mainFrame = MySmsApp.getApplication().getMainFrame();
            aboutBox = new MySmsAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        MySmsApp.getApplication().show(aboutBox);
    }



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane MessageScrollPane;
    private javax.swing.JFrame OptionsFrame;
    private javax.swing.JTabbedPane TabbedPane;
    private javax.swing.JMenuItem aboutItem;
    private javax.swing.JButton btAddNum;
    private javax.swing.JButton btClear;
    private javax.swing.JButton btSchedule;
    private javax.swing.JButton btSend;
    private javax.swing.JButton butCloseOptions;
    private javax.swing.JButton butSave;
    private javax.swing.JCheckBox chbSSL;
    private static javax.swing.JMenuItem configurationItem;
    private javax.swing.JMenuItem exitItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JLabel lb160by2LoginName;
    private javax.swing.JLabel lbl160by2Email;
    private javax.swing.JLabel lblEmailPassword;
    private javax.swing.JLabel lblEmailUserName;
    private javax.swing.JLabel lblLogonInfo;
    private javax.swing.JLabel lblMessage;
    private javax.swing.JLabel lblSMTPPort;
    private javax.swing.JLabel lblSMTPServer;
    private javax.swing.JLabel lblSSL;
    private javax.swing.JLabel lblServerInfo;
    private javax.swing.JLabel lblTo;
    private javax.swing.JLabel lblUserInfo;
    private javax.swing.JMenuBar mainMenuBar;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenu optionsMenu;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JPanel scheduledPanel;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JTextField txt160by2Email;
    private javax.swing.JTextField txt160by2LoginName;
    private javax.swing.JTextArea txtAMessage;
    private javax.swing.JPasswordField txtEmailPassword;
    private javax.swing.JTextField txtEmailUserName;
    private javax.swing.JTextField txtSMTPPort;
    private javax.swing.JTextField txtSMTPServer;
    private static javax.swing.JTextField txtTo;
    // End of variables declaration//GEN-END:variables

    private JDialog aboutBox;
}
